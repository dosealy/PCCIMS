apply plugin: 'announce'
//apply plugin: 'jetty'
apply plugin: 'groovy'

configurations {
    functTestCompile.extendsFrom testCompile
    functTestRuntime.extendsFrom testRuntime
}

test {
    exclude '**/*IntegTtest.class'
    reports.html.destination = file("reports.html.destination/unit")
    reports.junitXml.destination = file("$reports.junitXml.destination/unit")
}

dependencies {
    //compile project(':repository')
    testCompile 'org.codehaus.groovy:groovy:2.0.6'
    functTestCompile 'org.codehaus.geb:geb-junit4:0.7.2'
    functTestCompile "$seleniumGroup:selenium-api:$seleniumVersion"
    functTestRuntime "$seleniumGroup:selenium-firefox-driver:$seleniumVersion"
    
}

sourceSets {
	integrationTest {
		java.srcDir file('src/integrationTest/java')
		resources.srcDir file('src/integrationTest/sources')
		compileClasspath = sourceSets.main.output + configurations.testRuntime
		runtimeClasspath = output + compileClasspath
	}

	functionalTest {
        groovy.srcDir file('src/functTest/groovy')
        resources.srcDir file('src/functTest/resources')
        compileClasspath = sourceSets.main.output + configurations.functTestCompile
        runtimeClasspath = output + compileClasspath + configurations.functTestRuntime
    }
}

task integrationTest(type:Test) {
	description = 'Runs the integration tests.'
	group = 'verification'
	include = '**/*IntegTtest.class'
	reports.html.destination = file("$reports.html.destination/integration")
    reports.junitXml.destination = file("$reports.junitXml.destination/integration")
 //   dependsOn startAndPrepareDatabase
 //   finalizedBy stopDatabase

}

/*
ext {
    functionalJettyStopPort = 8081
    functionalJettyStopKey = 'stopKey'
}

task functionalJettyRun(type: org.gradle.api.plugins.jetty.JettyRun) {
    stopPort = functionalJettyStopPort
    stopKey = functionalJettyStopKey
    contextPath = 'todo'
    daemon = true
}

task functionalJettyStop(type: org.gradle.api.plugins.jetty.JettyStop) {
    stopPort = functionalJettyStopPort
    stopKey = functionalJettyStopKey
}

*/

task functionalTest(type: Test) {
    testClassesDir = sourceSets.functionalTest.output.classesDir
    classpath = sourceSets.functionalTest.runtimeClasspath
    reports.html.destination = file("$reports.html.destination/functional")
    reports.junitXml.destination = file("$reports.junitXml.destination/functional")
    systemProperty 'geb.env', 'firefox'
    systemProperty 'geb.build.reportsDir', reporting.file("$name/geb")
    //dependsOn functionalJettyRun
    //finalizedBy functionalJettyStop
}

tasks.withType(Test) {
	//	systemProperty 'items', '20'	//添加系统参数
    jvmArgs '-Xms128m', '-Xmx256m', '-XX:MaxPermSize=128m'

    testLogging {
        showStandardStreams = true  //显示标准输出
        exceptionFormat 'full'		//异常信息全部输出
        events 'started', 'passed', 'skipped', 'failed'	//输出指定阶段的事件
    }
    forkEvery = 2				//每个fork进程中测试类的最大个数
    maxParallelForks = determineMaxParallelForks()		// fork进程的最大数
}

def determineMaxParallelForks() {
    (Runtime.runtime.availableProcessors() / 2) < 1 ? 1 : Runtime.runtime.availableProcessors() / 2
}

functionalTest.dependsOn integrationTest
check.dependsOn functionalTest

test.addTestListener(new NotificationTestListener(project))	//添加监听，也可以用另一种方式
class NotificationTestListener implements TestListener {
    final Project project

    NotificationTestListener(Project project) {
        this.project = project
    }

    @Override
    void afterSuite(TestDescriptor suite, TestResult result) {
        if (!suite.parent && result.getTestCount() > 0) {
            long elapsedTestTime = result.getEndTime() - result.getStartTime()
            project.announce.announce("Elapsed time for execution of ${result.getTestCount()} test(s): $elapsedTestTime ms", 'local')
        }
    }

    @Override
    void afterTest(TestDescriptor testDescriptor, TestResult result) {}

    @Override
    void beforeSuite(TestDescriptor suite) {}

    @Override
    void beforeTest(TestDescriptor testDescriptor) {}
}